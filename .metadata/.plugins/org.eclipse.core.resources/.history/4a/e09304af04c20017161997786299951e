import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;

import AugmentedTree.IntervalTree;

public class Gene extends Region{

	
	private HashMap<String,Transcript> transcripts;
	
	public Gene(int x1, int x2, Annotation annotation){
		super(x1,x2,annotation);
		transcripts = new HashMap <String,Transcript>();
	}

	public Gene(int x1, int x2, Annotation annotation, Annotation subannotation){
		super(x1,x2,annotation);
		transcripts = new HashMap <String,Transcript>();
		transcripts.put(subannotation.getId(),new Transcript(x1,x2,subannotation));
	}

	public int getTranscriptNumber(){
		int n = 0;
		for( String k : transcripts.keySet() ){
			if(transcripts.get(k).getRegionsTree().size() > 0){
				n ++;
			}
		}
		return n;
	}
	
	public int getProteinNumber(){
		int n = 0;
		for( String k : transcripts.keySet() ){
			n += transcripts.get(k).getProtNum();
		}
		return n;
	}
	
	public ArrayList<ExonSkip> getExonSkips() {
		return null;
	}
	
	public int hashCode(){
		return this.getAnnotation().hashCode();
	}
	
	public String toString(){
		String output = "Gene: "+ super.toString() + "\n";
		for( String k : transcripts.keySet() ){
			output += transcripts.get(k).toString();
		}
		return output;
	}
	
}

