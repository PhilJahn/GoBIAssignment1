import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;

public class RegionVector {
	
	public static void main(String[] args) {
		RegionVector rv1 = new RegionVector(1,5);
		RegionVector rv2 = new RegionVector(2,5);
		RegionVector rv3 = new RegionVector(4,10);
		RegionVector rv = rv1.subtract(rv2);
		System.out.println(rv.getRegions());
	}


	private Vector<Region> regions;

	public RegionVector(int x1, int x2){
		regions = new Vector<Region>();
		regions.add(new Region(x1,x2));
		regions.sort((a,b) -> Integer.compare(a.getStart(),b.getStart()));
	}
	
	public RegionVector(Vector<Region> region){
		this.regions = region;
		regions.sort((a,b) -> Integer.compare(a.getStart(),b.getStart()));
		this.merge();
	}
	
	public Vector<Region> getRegions(){
		return regions;
	}
	
	public void merge(){

		regions.sort(new RegionComparator());

        Region r = regions.get(0);
        int start = r.getStart();
        int stop = r.getStop();

        Vector<Region> resultV = new Vector<Region>();

        for (int i = 1; i < regions.size(); i++) {
            Region current = regions.get(i);
            if (current.getStart() <= stop+1) {
                stop = Math.max(current.getStop(), stop);
            } else {
                resultV.add(new Region(start, stop));
                start = current.getStart();
                stop = current.getStop();
            }
        }

        resultV.add(new Region(start, stop));
        regions = resultV;
	}
	
	public RegionVector merge(RegionVector rv){

		regions.addAll(rv.getRegions());
		RegionVector results = new RegionVector(regions); 
		
		results.merge();
		
        return results;
	}
	
	public RegionVector subtract(RegionVector rv){
		
		regions.sort(new RegionComparator());
		
		Vector<Region> sub = rv.getRegions();
		sub.sort(new RegionComparator());

        Vector<Region> resultV = new Vector<Region>();
        
        int j = 0;
        int i = 0;
        while (i < regions.size()) {
            Region current = regions.get(i);
            int start = current.getStart();
            int stop = current.getStop();
            Region cursub = sub.get(j);
            int substart = cursub.getStart();
            int substop = cursub.getStop();
            while(substop < start && j < sub.size()){
            	j++;
            	if(j < sub.size()){
            		cursub = sub.get(j);
            		substart = cursub.getStart();
            		substop = cursub.getStop();
            	}
            }
            while(substop <= stop && substop >= start && j < sub.size()){
            	substart = cursub.getStart();
            	substop = cursub.getStop();
            	if (start < substart) {
            		resultV.add(new Region(start, substart-1));
            		start = substop +1;
            		j++;
            		
            	}
            	else{
            		start = substop +1;
            		j++;
            	}
            	if(j < sub.size()){
            		cursub = sub.get(j);
            		substart = cursub.getStart();
                	substop = cursub.getStop();
            	}
            }
            if(substop > stop && substart < stop){
            	resultV.add(new Region(start, substart-1));
            }
            else{
            	resultV.add(new Region(start,stop));
            }
            i++;
        }
        return new RegionVector(resultV);
		
	}
	
	class RegionComparator implements Comparator<Region>
	{
	    public int compare(Region x1, Region x2)
	    {
	        return x1.getStart() - x2.getStart();
	    }
	}
}
