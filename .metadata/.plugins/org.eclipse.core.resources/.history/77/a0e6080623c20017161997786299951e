import java.awt.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Vector;

public class ExonSkipping {

	public static void main(String[] args) {
		String gtfPath ="";
		String outputPath ="";
		for(int i =0; i < args.length-1; i++){
			if(args[i].equals("-gtf")){
				gtfPath = args[i+1];
				i++;
			}
			else if(args[i].equals("-o")){
				outputPath = args[i+1];
				i++; 
			}
		}
		
		if(gtfPath.equals("") || outputPath.equals("")){
			System.out.println("Missing Filepaths");
		}
		else{
			ExonSkipping ex = new ExonSkipping(gtfPath);
		
			String output = ex.getSkippedExons();
			ArrayList<String> outputAsList = new ArrayList<String>();
			outputAsList.add(output);
			Path outputfilePath = Paths.get(outputPath);
			try {
				Files.write(outputfilePath, outputAsList, Charset.forName("UTF-8"));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

	private HashMap<Integer,Gene> geneSet;
	
	public ExonSkipping (String gtfPath) {
		Path filePath = Paths.get(gtfPath);
		geneSet = new HashMap<Integer,Gene>();
	    try {
	    	boolean containsGenes = false;
	    	boolean containsTranscripts = false;
	    	File file = filePath.toFile();
	        BufferedReader br = new BufferedReader (new FileReader(file));
	        String line;
	        Gene curGene = null;
	        Annotation curGAnno = null;
	        Transcript curTrans = null;
	        Annotation curTAnno = null;
	        Annotation curCAnno = null;
	        ArrayList<Transcript> unknownGene = new ArrayList<Transcript>();
	        ArrayList<Region> unknownTranscript = new ArrayList<Region>();
	        HashMap<String,Annotation> mapAnno = new HashMap<String,Annotation>(); 
	        while ((line = br.readLine()) != null){
	        	String[] lineSplit = line.split("\t");
	        	if(lineSplit.length >= 8){
	        	String[] attrSplit = lineSplit[8].split(";");
	        	HashMap<String,String> attr;
	        	if(lineSplit[2].equals("gene")){
	        		containsGenes = true;
	        		attr = getAttributes(attrSplit);
	        		String id = attr.get("gene_id");
	        		String name = attr.get("gene_name");       		
	        		String type = lineSplit[1];
	        		char strand = lineSplit[6].charAt(0);
	        		String chr = lineSplit[0];
	        		int start = Integer.parseInt(lineSplit[3]);
	        		int stop = Integer.parseInt(lineSplit[4]);
	        		
	        		Annotation geneAnno = new Annotation(id,name,chr,strand,type);
	        		Gene gene = new Gene(start, stop, geneAnno);
	        		geneSet.put(gene.hashCode(),gene);
	        		curGene = gene;
	        		curGAnno = gene.getAnnotation();
	        	}
	        	else if(lineSplit[2].equals("transcript")){
	        		containsTranscripts = true;
	        		attr = getAttributes(attrSplit);
	        		String super_id = attr.get("gene_id");
	        		String gene_name = attr.get("gene_name");
	        		String id = attr.get("transcript_id");
	        		String name = attr.get("transcript_name");
	        		String type = lineSplit[1];
	        		char strand = lineSplit[6].charAt(0);
	        		String chr = lineSplit[0];
	        		int start = Integer.parseInt(lineSplit[3]);
	        		int stop = Integer.parseInt(lineSplit[4]);
	        		

	        		Annotation transAnno = new Annotation(id,name,chr,strand,super_id,type,gene_name);
	        		Transcript trans = new Transcript(start,stop,transAnno);
	        		System.out.println(curGAnno.toString());
	        		System.out.println(transAnno.toString());
	        		
	        		if(transAnno.isSub(curGAnno)){
	        			curGene.add(trans);
	        		}
	        		else{
	        			unknownGene.add(trans);
	        		}
	        	
	        		
	        		curTrans = trans;
	        		curTAnno = trans.getAnnotation();
	        	}
	        	else if(lineSplit[2].equals("CDS")){
	        		attr = getAttributes(attrSplit);
	        		String super_super_id = attr.get("gene_id");
	        		String gene_name = attr.get("gene_name");
	        		String super_id = attr.get("transcript_id");
	        		String id = attr.get("protein_id");
	        		String type = lineSplit[1];
	        		char strand = lineSplit[6].charAt(0);
	        		String chr = lineSplit[0];
	        		int start = Integer.parseInt(lineSplit[3]);
	        		int stop = Integer.parseInt(lineSplit[4]);
	        		Region cds;
	        		Annotation cdsAnno;
	        		if(curCAnno != null && curCAnno.getId().equals(id) && curCAnno.getSuperId().equals(super_id) && curCAnno.getSuperSuperId().equals(super_super_id)){
	        			cdsAnno = curCAnno;
	        		}
	        		else{
	        			cdsAnno = mapAnno.get(id+super_id+super_super_id);
	        			if(!(cdsAnno != null)){
	        				cdsAnno = new Annotation(id,chr,strand,super_id,super_super_id,type,gene_name);
	        				mapAnno.put(id+super_id+super_super_id,cdsAnno);
	        			}
	        		}
	        		cds = new Region(start,stop,cdsAnno);
	        		
	        		
	        		if(cdsAnno.isSub(curTAnno)){
	        			curTrans.add(cds);
	        		}
	        		else if(containsTranscripts){
	        			unknownTranscript.add(cds);
	        		}
//	        		else{
//	        			super_id = super_super_id;
//		        		id = super_id;
//		        		String name = attr.get("transcript_name");
//
//		        		Annotation transAnno = new Annotation(id,name,chr,strand,super_id,type,gene_name);
//		        		Transcript trans = new Transcript(start,stop,transAnno);
//		        		if(transAnno.isSub(curGAnno)){
//		        			curGene.add(trans);
//		        		}
//		        		else{
//			        		String geneid = super_id;
//			        		String genename = attr.get("gene_name");   		
//
//			        		Annotation geneAnno = new Annotation(geneid,genename,chr,strand,type);
//			        		Gene gene = new Gene(start, stop, geneAnno);
//			        		geneSet.put(gene.hashCode(),gene);
//			        		gene.add(trans);
//			        		
//			        		curGene = gene;
//			        		curGAnno = gene.getAnnotation();
//		        		}
//		        		
//		        		curTrans = trans;
//		        		curTAnno = trans.getAnnotation();
//	        		}
	        		
	        	}
	        	else{}
	        	for(int i = 0; i < unknownGene.size(); i++){
	        		System.out.println("I was here");
	        		Transcript trans = unknownGene.get(i);
	        		Gene gene = geneSet.get(trans.getAnnotation().getSuperId());
	        		if(gene != null){
	        			gene.add(trans);
	        		}
	        		else{
	        			Annotation transAnno = trans.getAnnotation();
		        		String geneid = transAnno.getSuperId();
		        		String genename = transAnno.getGeneName();   		
		        		String type = transAnno.getType();
		        		char strand = transAnno.getStrand();
		        		String chr = transAnno.getChromosome();
		        		int start = trans.getStart();
		        		int stop = trans.getStop();
		        		
		        		Annotation geneAnno = new Annotation(geneid,genename,chr,strand,type);
		        		gene = new Gene(start, stop, geneAnno);
		        		geneSet.put(gene.hashCode(),gene);
		        		gene.add(trans);
	        		}
	        	}
	        	for(int i = 0; i < unknownTranscript.size(); i++){
//TODO
	        	}
	        }
	        }
	        br.close();	
	    	
	    } catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static HashMap<String,String> getAttributes (String[] attrs){
		HashMap <String,String> attrMap = new HashMap <String,String>();
		for(int i = 0; i < attrs.length; i++){
			String[] attr = attrs[i].split("\"");
			attr[0] = attr[0].trim();
			attr[1] = attr[1].trim();
			attrMap.put(attr[0],attr[1]);
		}
		return attrMap;
	}
	
	
	public String getSkippedExons(){
		String result = "";
		result += "id\tsymbol\tchr\tstrand\tnprots\tntrans\tSV\tWT\tWT_prots\tSV_prots\tmin_skipped_exon\tmax_skipped_exon\tmin_skipped_bases\tmax_skipped_bases\n";
		for (Integer key: geneSet.keySet()) {
			Gene curGene = geneSet.get(key);
			Annotation curGAnno = curGene.getAnnotation();
//			System.out.println("getExonSkips");
			ArrayList<ExonSkip> skips = curGene.getExonSkips();
//			System.out.println("gotExonSkips");
			int tn = curGene.getTranscriptNumber();
			int pn = curGene.getProteinNumber();
			
			String geneid = curGAnno.getId();
			String genename = curGAnno.getName();
			String chr = curGAnno.getChromosome();
			char str = curGAnno.getStrand();
			
			for(ExonSkip skip: skips){
				result += geneid + "\t" + genename + "\t"+  chr + "\t" + str +"\t";
				result += tn + "\t" + pn + "\t";
				result += skip.getStart() + ":" + skip.getStop() + "\t";
				
				ArrayList<Region> introns = skip.getWTIntrons();
				result += (introns.get(0).getStart() +":" + introns.get(0).getStop());
				for(int i = 1; i < introns.size(); i++ ){
					result += ("|"+introns.get(i).getStart() +":" + introns.get(i).getStop());
				}
				result += "\t";
				
				ArrayList<String> wt = skip.getWTProt();
				result += (wt.get(0));
				for(int i = 1; i < wt.size(); i++ ){
					result += ("|"+wt.get(i));
				}
				result += "\t";
				
				ArrayList<String> sv = skip.getSVProt();
				result += (sv.get(0));
				for(int i = 1; i < sv.size(); i++ ){
					result += ("|"+sv.get(i));
				}
				result += "\t";
				
				result += skip.getMinEx() + "\t" + skip.getMaxEx() + "\t" + skip.getMinBase() + "\t" + skip.getMaxBase() +"\n";
				
			}
		}
		return result;
	}
	
	
	public ArrayList<Gene> getGenes(){
		ArrayList<Gene> result = new ArrayList<Gene>();
		for (Integer key: geneSet.keySet()) {
		   result.add(geneSet.get(key));
		}
		return result;
	}
	

}
