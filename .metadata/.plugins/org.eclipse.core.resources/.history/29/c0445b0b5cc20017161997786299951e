import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.Vector;

import AugmentedTree.IntervalTree;

public class Gene extends Region{

	
//	public static void main(String[] args){
//		Annotation a = new Annotation("id", "name", "str", '-', "test");
//		IntervalTree<Region> test = new IntervalTree<Region>();
//		Region r1 = new Region(1,20,a);
//		Region r2 = new Region(1,8,a);
//		Region r3 = new Region(0,10,a);
//		Region r4 = new Region(7,10,a);
//		Region r5 = new Region(6,10,a);
//		test.add(r1);
//		test.add(r2);
//		test.add(r3);
//		test.add(r4);
//		test.add(r5);
//		ArrayList<Region> posCheck = new ArrayList<Region>();
//		posCheck = test.getIntervalsEndAt(10, posCheck);
//		System.out.println(test.toTreeString());
//		System.out.println(posCheck.toString());
//	}
	
	private HashMap<String,Transcript> transcripts;
	
	public Gene(int x1, int x2, Annotation annotation){
		super(x1,x2,annotation);
		transcripts = new HashMap <String,Transcript>();
	}

	public Gene(int x1, int x2, Annotation annotation, Annotation subannotation){
		super(x1,x2,annotation);
		transcripts = new HashMap <String,Transcript>();
		transcripts.put(subannotation.getId(),new Transcript(x1,x2,subannotation));
	}

	public int getTranscriptNumber(){
		int n = 0;
		for( String k : transcripts.keySet() ){
			if(transcripts.get(k).getRegionsTree().size() > 0){
				n ++;
			}
		}
		return n;
	}
	
	public int getProteinNumber(){
		int n = 0;
		for( String k : transcripts.keySet() ){
			n += transcripts.get(k).getProtNum();
		}
		return n;
	}
	
	public ArrayList<ExonSkip> getExonSkips() {
//		long startTime = System.currentTimeMillis();
		IntervalTree<Region> introns = new IntervalTree<Region>();
		
		for( String k : transcripts.keySet() ){
			Transcript curTran = transcripts.get(k);
			if(curTran.setIntrons()){
				introns.addAll(curTran.getIntrons());
			}
		}
		//introns holds all introns
		
//		long stopTime = System.currentTimeMillis();
//		System.out.println("All Introns: " + (stopTime-startTime));
		
//		startTime = System.currentTimeMillis();
		IntervalTree<Region> mergeIntrons = new IntervalTree<Region>();
		Iterator<Region> iterator = introns.iterator();
		int lastStart = -1;
		int lastStop = -1;
		int curStart = -2;
		int curStop = -2;
		while(iterator.hasNext()){
			Region curIntron = iterator.next();
			curStart = curIntron.getStart();
			curStop = curIntron.getStop();
			if(lastStart == curStart && lastStop == curStop){
				
			}
			else{
				ArrayList<Region> sameIntron = new ArrayList<Region>();
				sameIntron = introns.getIntervalsEqual(curStart, curStop, sameIntron);
				Region mergeIntron = curIntron;
				for( Region r : sameIntron){
					mergeIntron = mergeIntron.merge(r);
				}
				mergeIntrons.add(mergeIntron);
				lastStart = curStart;
				lastStop = curStop;
			}
		}
		//mergeIntrons holds all distinct introns
		
//		stopTime = System.currentTimeMillis();
//		System.out.println("merge Introns: " + (stopTime-startTime));
		
//		System.out.println(mergeIntrons.toTreeString());
		
		ArrayList<ExonSkip> skips = new ArrayList<ExonSkip>();
		
		Iterator<Region> mergeIterator = mergeIntrons.iterator();
//		startTime = System.currentTimeMillis();
		while(mergeIterator.hasNext()){
			Region sv = mergeIterator.next();
			int svstart = sv.getStart();
			int svstop = sv.getStop();
			
			HashSet<String> sv_transcript_ids = sv.getAnnotation().getSuperIds();
			
			HashSet<String> wt_start_transcript_ids = new HashSet<String>();
			
			HashSet<Region> wt_candidatesStart = new HashSet<Region>();
			wt_candidatesStart = mergeIntrons.getIntervalsBeginAt(svstart, wt_candidatesStart);
			
			for(Region wt_candidate : wt_candidatesStart){
				wt_start_transcript_ids.addAll(wt_candidate.getAnnotation().getSuperIds());
			}

			HashSet<String> wt_stop_transcript_ids = new HashSet<String>();
			
			HashSet<Region> wt_candidatesStop = new HashSet<Region>();
			wt_candidatesStop = mergeIntrons.getIntervalsEndAt(svstop, wt_candidatesStop);
			
			for(Region wt_candidate : wt_candidatesStop){
				wt_stop_transcript_ids.addAll(wt_candidate.getAnnotation().getSuperIds());
			}
			
			HashSet<String> wt_transcript_ids = new HashSet<String>();
			
			wt_transcript_ids.addAll(wt_stop_transcript_ids);
			
			wt_transcript_ids.retainAll(wt_start_transcript_ids);
			wt_transcript_ids.removeAll(sv_transcript_ids);
			
			if(wt_transcript_ids.size() > 0){
				HashMap<String,Integer> base = new HashMap<String,Integer>();
				HashMap<String,Integer> ex = new HashMap<String,Integer>();
				for(String id : wt_transcript_ids){
					base.put(id,0);
					ex.put(id,svstop -svstart);
				}
				HashSet<Region> wt_skips = new HashSet<Region>();
				HashSet<Region> wt_introns = new HashSet<Region>();
				HashSet<String> wt_prot_ids = new HashSet<String>();
				wt_introns = mergeIntrons.getIntervalsSpannedBy(svstart, svstop, wt_introns);
				boolean isWT = false;
				for(Region wt_intron : wt_introns){
					Annotation wt_anno = wt_intron.getAnnotation();
					HashMap<String,String> idref = wt_anno.getIdRef();
					for(String id : wt_transcript_ids){
						String protid = idref.get(id);
						if(protid != null){
							isWT = true;
							wt_prot_ids.add(protid);
							base.put(id, base.get(id)-wt_intron.length());
							ex.put(id, ex.get(id) +1);
						}
					}
					if(isWT){
						wt_skips.add(wt_intron);
					}
				}
				int minEx = svstop -svstart;
				int maxEx = 0;
				int minBase = svstop -svstart;
				int maxBase = 0;
				for(String id : wt_transcript_ids){
					int baseId = base.get(id);
					int exId = ex.get(id);
					minEx = Math.min(minEx, exId);
					
					ex.put(id,svstop -svstart);
				}

				ExonSkip skip = new ExonSkip(sv.getAnnotation().getIds(),wt_prot_ids,wt_skips,minEx,maxEx,minBase,maxBase, svstart, svstop);
				skips.add(skip);
			}
		}
//		stopTime = System.currentTimeMillis();
//		System.out.println("Skip Identifizierung: " + (stopTime-startTime));
		
		
		return skips;
	}
	
	public void removeEmpty(){
		for( String k : transcripts.keySet() ){
			if(transcripts.get(k).getRegionsTree().size() == 0){
				transcripts.remove(k);
			}
		}
	}
	
	public int hashCode(){
		return this.getAnnotation().hashCode();
	}
	
	public String toString(){
		String output = "Gene: "+ super.toString() + "\n";
		for( String k : transcripts.keySet() ){
			output += transcripts.get(k).toString();
		}
		return output;
	}

	public void add(Transcript trans) {
		this.transcripts.put(trans.getAnnotation().getId(), trans);
	}
	
	class StartRegionComparator implements Comparator<Region>
	{
	    public int compare(Region x1, Region x2)
	    {
	        return x1.getStart() - x2.getStart();
	    }
	}
}

